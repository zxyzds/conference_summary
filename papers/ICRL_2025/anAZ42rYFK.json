{
    "id": "anAZ42rYFK",
    "title": "LARM: Large Auto-Regressive Model for Long-Horizon Embodied Intelligence",
    "abstract": "Due to the need of interacting with the world, embodied agents are required to possess comprehensive task-relevant knowledge, long-horizon planning capability, and a swift response speed. Large language models (LLMs), owing to their rich general knowledge, recently achieve promising results in open-world embodied tasks, like the world exploration in Minecraft. However, the outputs of LLMs are descriptive sentences or code, which are slow to generate and not end-to-end, as a translator is required to translate the LLM outputs into actions to perform. To address these limitations, we introduce the large auto-regressive model (LARM). LARM leverages environment observations as input and predicts subsequent actions in an auto-regressive manner. Compared with LLM based methods, LARM directly predicts the next skill for execution according to the current observation. In addition, considering that the commonly adopted training paradigms do not reflect the mutual influence and dependency between actions and observations, we develop a novel data format named auto-regressive node transmission structure and assemble a corresponding dataset to train LARM. Combining these techniques, LARM successfully harvests enchanted equipment in Minecraft, which demands significantly more complex decision-making chains than the highest achievements of prior best methods. Besides, the speed of LARM is 6.8x faster than LLMs with similar parameter volume.",
    "keywords": [
        "Embodied Intelligence",
        "Minecraft",
        "Large Language Model",
        "Large Auto-regressive Model"
    ],
    "primary_area": "applications to robotics, autonomy, planning",
    "TLDR": "We introduce the conceptof large auto-regressive model and study how to use it to handle embodied AI tasks.",
    "creation_date": "2024-09-26",
    "original_date": "2024-10-04",
    "modification_date": "2024-10-13",
    "forum_link": "https://openreview.net/forum?id=anAZ42rYFK",
    "pdf_link": "https://openreview.net/pdf?id=anAZ42rYFK",
    "comments": [
        {
            "summary": {
                "value": "This work introduces the Large Auto-Regressive Model (LARM) for long-horizon tasks, focusing on the Minecraft environment. LARM is built upon various existing techniques, including GPT-4, LoRA, and Q-Former. Given a specific target task, LARM takes multi-view images along with the corresponding task text as input to predict the next action. The predicted skill token is then used to match an existing skill set generated by GPT-4, allowing for selecting the optimal skill. The authors claim this approach is efficient as it predicts the next action directly. Additionally, to train LARM, the work introduces a data format known as ARNTS to manage sequential chains. Experimental results indicate that LARM outperforms existing reinforcement learning-based methods."
            },
            "soundness": {
                "value": 3
            },
            "presentation": {
                "value": 3
            },
            "contribution": {
                "value": 2
            },
            "strengths": {
                "value": "- The work is well-organized and includes numerous details that help readers understand the LARM process.\n- Besides LARM, the work defines a dataset for training the model, enabling LARM to learn sequential actions effectively.\n- A demonstration of LARM is also provided."
            },
            "weaknesses": {
                "value": "- The method relies heavily on existing techniques, which undermines the novelty of the work.\n- The tasks in the experiments are not particularly challenging, raising concerns about the generalizability of LARM.\n- The formulation of LARM is relatively simple and closely resembles imitation learning. Aside from reinforcement learning methods, are there any imitation learning-based baselines to compare with LARM?\n- Furthermore, have the baselines in Tables 1 and 2 been fine-tuned with the same data as LARM?"
            },
            "questions": {
                "value": "Please see weaknesses."
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": 5
            },
            "confidence": {
                "value": 3
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        {
            "summary": {
                "value": "Recently, embodied agents have been considered one of the promising and attractive research directions that are able to communicate with their surroundings and do complex open-world tasks. However, these agents may require comprehensive task knowledge, long-term planning, and rapid response capabilities to interact effectively with the world. Although LLMs excel in open-world tasks leveraging their rich knowledge, their outputs are slow and not directly executable, requiring translation into actions. To overcome these limitations, this paper introduces the large auto-regressive model (LARM), which directly predicts the next action based on environment observations in an auto-regressive manner. Unlike LLMs, LARM forecasts actionable skills immediately, reducing latency. The authors also introduce an auto-regressive node transmission data format to train LARM, emphasizing dependencies between actions and observations."
            },
            "soundness": {
                "value": 2
            },
            "presentation": {
                "value": 2
            },
            "contribution": {
                "value": 3
            },
            "strengths": {
                "value": "- The proposed method can be fully embedded into the device without the need for a call from a proprietary LLM API.\n- Inference speed seems to be faster than the LLava-1.6-7B. (But the comparison looks a little bit tricky.)\n- Reasonable architectural design and pre-training/fine-tuning processes.\n- Solid performance over the Minecraft simulation benchmark."
            },
            "weaknesses": {
                "value": "- The grounds for using Q-former architecture for visual token compression are not sufficiently validated. If this Q-former structure aims for token compression into a fixed length, there should be a number of competitive techniques, including token sparsification, merging, pooling, convolution layers, MLPs, Mixture-of-experts, etc. I expect analyses that provide reasonable observations and insights into why this employed design is more appropriate than those nonparametric and parametric potential counterparts for Long-Horizon Embodied Intelligence.\n\n- Also, the effect of other components, such as training the LoRA or projector weights, is not clearly verified. At the same time, the discussion of the 'single skill token' is also not very clear. It is also possible to  1) produce multiple skill tokens, 2) perform the Hungarian algorithm to match 'multiple' skill tokens with relevant skill embeddings, and then 3) select the best-matched skill based on some importance/uncertainty metrics. More discussions and insights/evidence on the use of single-skill tokens would be helpful for the design choice of the proposed approach.\n\n- Efficiency comparison sounds not that reliable to me. Even baselines with LLM API calls have a fluctuation in inference time depending on network latency; it would be meaningful to compare the wall-clock running time/cost among baselines and the proposed methods under stable network conditions. \n\n- detailed explanations of the usage of GPT-4 for the skill library and the examples/format of /environment feedback' and 'the last skill position coordinate inventory list' are not provided. I believe the design choice of this structure also affects the model performance; the authors should provide detailed information in the appendix."
            },
            "questions": {
                "value": "Please see the weakness."
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": 5
            },
            "confidence": {
                "value": 3
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        {
            "summary": {
                "value": "To address the problem that LLM-based embodied agent policy requires post-processing, the authors proposed LARM: large auto-regressive model to predict the next skill for execution, taking in environment feedback and observations.  They also proposed auto-regressive node transmission structure to reflect the correlation between actions and observation. They conducted experiments on Minecraft and completed some complex decision-making tasks with faster inference speed."
            },
            "soundness": {
                "value": 2
            },
            "presentation": {
                "value": 3
            },
            "contribution": {
                "value": 2
            },
            "strengths": {
                "value": "-The authors proposed LARM to solve complicated decision-making tasks in Minecraft and achieved good results than previous models.\n\n-The authors pinpointed the potential problem of lacking mutual dependency between actions and observation\n\n-The inference speed of this method is faster than those LLM-based ones."
            },
            "weaknesses": {
                "value": "-When considering decision-making agents, the authors missed important benchmarks in related work.\n\n-There is no evidence showing that propose method can generalize to other domains.\n\n-The proposed method requires engineering adaption to new domains.\n\n-The proposed model consists of many components, yet the individual performance contribution and their necessity are not shown in any \nablation studies at all.\n\n-The proposed model is not novel enough, a combination of foundation models."
            },
            "questions": {
                "value": "-How does the agent perform the skill in Minecraft? Is it hard-coded and executed deterministically?\n\n-Does this method generalize beyond Minecraft in other decision-making environments (e.g. ALFRED)? \n\n-Having a finite skill space might limit the generalizability of the proposed framework. What is the authors response to the statement?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": 3
            },
            "confidence": {
                "value": 5
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        {
            "summary": {
                "value": "This paper introduces a novel auto-regressive method for long-horizon planning called LARM, which is an extension of LLaVA with a trainable LoRA module. This auto-regressive approach directly predicts subsequent actions rather than generating long-context task descriptions, enabling end-to-end skill generation. To address the limitations of environmental dependency in web data, the paper also defines a graph-like data node structure (ARNTS). This structure allows the agent to learn how to schedule future skills by following a sequential chain in multi-step tasks. The paper demonstrates remarkable improvements compared to recent state-of-the-art methods in the Minecraft environment. LARM achieves 100% success on 14 out of 15 skills, significantly outperforming baselines such as MineAgent and LLaMA-Rider. Notably, LARM is the first method to successfully craft an enchanted tool, which requires a complex chain of steps to achieve."
            },
            "soundness": {
                "value": 3
            },
            "presentation": {
                "value": 3
            },
            "contribution": {
                "value": 2
            },
            "strengths": {
                "value": "1. The writing in this paper is well-structured, and the experimental results demonstrate the effectiveness of the proposed method.\n2. LARM shows impressive performance in both skill prediction and tech tree mastery, indicating promising improvements in long-term decision-making chains. \n3. LARM significantly enhances the efficiency of LLMs-based methods deployed on local machines, showcasing the advantages of its end-to-end subsequent skill prediction approach."
            },
            "weaknesses": {
                "value": "1. The authors assert that learning the dependency relationships among nodes is crucial for the agent's understanding of the long-horizon chain of skill prediction. Could the authors provide detailed information on the implementation of this node dependency learning process, particularly regarding the blue dotted lines in Figure 3? \n\n2. In this paper, LARM utilizes multi-view images as input for visual tokens, and I agree that this approach can enhance the visual perception of the surrounding environment, particularly for embodied agents. However, it would be beneficial to conduct an ablation analysis on the number of views and compare the results with those from monocular images to further refine the training design.\n\n3. The skill library in LARM is largely based on the one built for Voyager. In Voyager's paper, they conducted a zero-shot generalization evaluation on unseen tasks, demonstrating the potential of a lifelong skill library to expand skills in an open-world environment. Since LARM's skill library is pre-prepared, I wonder if LARM can similarly adapt to new tasks in a zero-shot manner as the skill library expands? \n \n4. This paper discusses inference efficiency in the comparison section, but the comparison setup is unclear. From my understanding, LARM is built on LLaVA, with additional trainable modules like Q-Former, LoRA, and a projector. In this context, the differences in inference efficiency compared to vanilla LLaVA are primarily due to these added modules and the length of the text context. As a result, the comparison lacks clarity and is not convincing, making it difficult to draw firm conclusions about LARM's inference efficiency.\n\n5. This paper has demonstrated that Wiki pre-trained LLaVA can learn general knowledge in the Minecraft world, which raises an interesting question about the performance of Wiki-pretrained LLaVA in predicting the next skills. While the authors assert that LLM outputs are typically limited to sentences or code, I do not agree that the output format limit the use of LLMs. For example, a prompt design strategy could be employed, using question prompt templates for LLaVA to predict fixed-length skill keywords. These keywords could then be projected into MineCLIP embeddings as query tokens for the skill library. Therefore, I recommend that the authors conduct additional analyses of the Wiki pre-trained LLaVA to thoroughly explore the capabilities of VLMs."
            },
            "questions": {
                "value": "Questions:\n1.This paper introduces a new data structure called Auto-Regressive Node Transmission Structure (ARNTS). However, it also mentions a similar term, ARTNS, which appears to be a typographical error for ARNTS and can lead to confusion while reading. If ARTNS refers to a technique in another paper, please provide the appropriate citation.\n\nWhile the authors provide a detailed comparative analysis with baseline methods, the paper still lacks point-by-point examinations of their proposed settings to demonstrate the overall pipeline. This raises some concerns, which I have outlined in the above questions.\nI will reevaluate the paper's rating after carefully considering the perspectives of other reviewers and the authors' responses. I am also willing to increase my score if the authors address my concerns."
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": 5
            },
            "confidence": {
                "value": 3
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        }
    ]
}