{
    "id": "5LvTfc4fBz",
    "title": "Physics-enhanced Neural Operator: An Application in Simulating Turbulent Transport",
    "abstract": "The precise simulation of turbulent flows is of immense importance in a variety of scientific and engineering fields, including climate science, freshwater science, and the development of energy-efficient manufacturing processes. Within the realm of turbulent flow simulation, direct numerical simulation (DNS) is widely considered to be the most reliable approach, but it is prohibitively expensive for long-term simulation at fine spatial scales. Given the pressing need for efficient simulation, there is an increasing interest in building machine learning models for turbulence, either by reconstructing DNS from alternative low-fidelity simulations or by predicting DNS based on the patterns learned from historical data. However, standard machine learning techniques remain limited in capturing complex spatio-temporal characteristics of turbulent flows, resulting in limited performance and generalizability. This paper presents a novel physics-enhanced neural operator (PENO) that incorporates physical knowledge of partial differential equations (PDEs) to accurately model flow dynamics. The model is further refined by a self-augmentation mechanism to reduce the accumulated error in long-term simulations. The proposed method is evaluated through its performance on two distinct sets of 3D turbulent flow data, showcasing the model's capability to reconstruct high-resolution DNS data, maintain the inherent physical properties of flow transport, and generate flow simulations across various resolutions. Additionally, experimental results on multiple 2D vorticity flow series, generated by different PDEs, highlight the transferability and generalizability of the proposed method. This confirms its applicability to a wide range of real-world scenarios in which extensive simulations are needed under diverse settings.",
    "keywords": [
        "turbulent flow",
        "neural operator",
        "knowledge-guided machine learning",
        "sequential simulation"
    ],
    "primary_area": "applications to physical sciences (physics, chemistry, biology, etc.)",
    "TLDR": "This paper presents a novel physics-enhanced neural operator (PENO) that incorporates physical knowledge of partial differential equations (PDEs) to accurately model flow dynamics.",
    "creation_date": "2024-09-27",
    "original_date": "2024-10-04",
    "modification_date": "2024-10-13",
    "forum_link": "https://openreview.net/forum?id=5LvTfc4fBz",
    "pdf_link": "https://openreview.net/pdf?id=5LvTfc4fBz",
    "comments": [
        {
            "summary": {
                "value": "This paper is focused on improving the Fourier Neural Operator, incorporating physical knowledge and making some architectural improvements in order to better simulate turbulent flow.  By adding physics knowledge, adding an extra network branch, and adding high-frequency signals at each time step, the method is designed to outperform existing techniques for this application.  The authors' PENO method is evaluated on well-known datasets / test problems."
            },
            "soundness": {
                "value": 4
            },
            "presentation": {
                "value": 4
            },
            "contribution": {
                "value": 3
            },
            "strengths": {
                "value": "1. The paper is written well, and the figure quality is high.\n\n2. The paper makes several novel (from what I can tell) modifications to the existing FNO algorithm, and it appears that these all turn out to be improvements.\n\n3. Results seem quite positive: it looks like the PENO method outperforms the target baselines exactly as hoped by the authors."
            },
            "weaknesses": {
                "value": "1. It is not clear how much each of the various improvements contributes to the overall success of the method.  For example, if you just use FNO with the additional self-augmentation mechanism or just with the additional physics data, how well do things perform compared to what is ultimately the PENO method?\n\n2. Fig. 6 is somewhat helpful, but it might be more informative to instead show the DNS result, and then just plot the errors of |method - DNS| for each method?  In particular, since you're using SSIM, readers may naturally want to look at the spatial distributions of errors of the various methods, not just the magnitudes, so that could be helpful.\n\n3. I think there are some missing details around training: what optimization algorithm was used, what learning rates, how long did training take (and ideally how does this compare to other methods like FNO), what do the training and validation loss curves look like (so we can see how much overfitting may be happening), etc.\n\nMinor:\n\n\"In the field of computational fluid dynamics (CFD),\" just say \"In CFD,\" here"
            },
            "questions": {
                "value": "1. Table 1: Why were SSIM and dissipation difference the chosen metrics here?  This could be informative for readers to understand.\n\n1. Could the authors speak at all to the generalizability of the PENO technique to problems besides turbulent flow?  How do the authors imagine other researchers building upon and extending the present work?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": 6
            },
            "confidence": {
                "value": 3
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        {
            "summary": {
                "value": "The paper presents a Physics-Enhanced Neural Operator (PENO) model designed to improve the simulation of turbulent flows. PENO integrates physical knowledge of partial differential equations (PDEs) with a Fourier Neural Operator (FNO) framework, aiming to capture complex flow dynamics accurately. The model introduces a self-augmentation mechanism to maintain high-frequency information, which is often lost in traditional FNO models. Evaluations on multiple turbulent flow datasets show that PENO effectively reconstructs high-resolution DNS data, generalizes across resolutions, and mitigates error accumulation in long-term simulations. This demonstrates PENO's applicability to various scientific and engineering fields where extensive, high-resolution simulations are essential but computationally expensive."
            },
            "soundness": {
                "value": 3
            },
            "presentation": {
                "value": 3
            },
            "contribution": {
                "value": 2
            },
            "strengths": {
                "value": "+ Integrates physics-based knowledge directly into the neural operator framework, enhancing the ability to capture complex flow patterns that purely data-driven models often miss.\n+ Demonstrates high generalizability across various datasets and spatial resolutions, showing adaptability to different turbulent flow conditions.\n+ Introduces a self-augmentation mechanism that preserves high-frequency flow patterns over time, essential for maintaining accuracy in simulations that run for extended periods.\n+ Outperforms existing models in structural similarity index measure (SSIM) and dissipation difference metrics, indicating superior performance in both spatial accuracy and gradient capturing ability."
            },
            "weaknesses": {
                "value": "- Relies on large eddy simulation (LES) data for optimal results, which, while cheaper than DNS data, still adds to the data requirements and may not always be available.\n- Risk of overfitting in long-term simulations, particularly when adjusting random Gaussian perturbation parameters, as extensive tuning is needed to balance accuracy and robustness.\n- Challenges with maintaining accuracy in extremely high-dimensional or fine-grained simulations, where capturing all necessary dynamics requires considerable computational power and data.\n- Not sure if the pressure predictions also are of high quality."
            },
            "questions": {
                "value": "1. What about the error in the predicted pressures? It has been known that it is more dificult to predict the pressures using neural operators.\n2. How easy would it be to extend the approach to non rectilinear domains. One of the main limitations of FNO is that they are suitable only for rectilinear domains."
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": 5
            },
            "confidence": {
                "value": 4
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        {
            "summary": {
                "value": "The authors provide an interesting approach to Physics-informed ML. However I cannot recommend this paper for acceptance unless (i) the paper can clarify some missing information  and (ii) additional information is provded on the model comparison with other approaches (see questions). This is nonetheless promising work -- hopefully the authors can address these shortcomings in paper presentation in the rebuttal."
            },
            "soundness": {
                "value": 2
            },
            "presentation": {
                "value": 1
            },
            "contribution": {
                "value": 3
            },
            "strengths": {
                "value": "1. Good motivation for neural operator work -- surrogates for DNS are a major research focus.\n2. Good test cases GIT, FIT and Taylor-Green are well accepted configs. in the physics community.\n3. Potentially promising results."
            },
            "weaknesses": {
                "value": "1. Quantitative evaluation in table 2 is missing model parameters/FLOPs to discount scaling effects on architecture comparison.\n2. More information on training data could be provided in appendix. See question 4."
            },
            "questions": {
                "value": "1. Line 76 -- Are Neural Operators really that efficient compared to other deep learning approaches? Chung et al (NeurIPS 2023) showed that Fourier neural operators in turbulent flow applications can have large matrix dimensionalities that result in poor scaling behavior when compared to other NN architectures. \n2. Figure 2 -- How does it make sense to have both DNS and LES data at time t as inputs? After an initial condition, LES and DNS behavior would drift from each other since the missing physics in LES would change the trajectory of the simulation. There is an ablation study to show minor improves from LES inputs. But some clarification on fundamental mechanism would be useful for readers.\n3. Table 2 -- what's the number of parameters/FLOPs of the different architectures. Model scales can affect predictive performance -- see Chung et al (NeurIPS 2023).\n4. What numerical solver for data? What is the spatial and temporal differencing scheme? Are flow compressible or incompressible? What is the resolution of DNS w.r.t Kolmogorov lengthscales?\n5. What are the exact numbers of training and test samples used for each case? A table in Appendix could be useful for clarity."
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": 5
            },
            "confidence": {
                "value": 3
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        {
            "summary": {
                "value": "Direct numerical simulations of turbulent flows can be prohibitively expensive to carry out. Fully data-driven or hybrid physics-based machine learning models can be quite promising in reducing the turnaround times for reconstructing fine scale data from coarse grained simulations or long time prediction of flow-field given historical DNS data. Motivated by the potential benefits of fourier neural operators in handling complex spatio-temporal data, the authors propose a physics enhanced neural operator method to model complex flow-field dynamics.\nWhile FNOs work in a purely data driven fashion, the PENO in addition to data, also leverages the physics knowledge in the form of the underlying governing PDEs of turbulent flows. The authors also introduce a self-augmentation technique to enable long-time simulations/roll-outs. They demonstrate the model's capability on  different turbulent flow datasets and test across different resolutions as well."
            },
            "soundness": {
                "value": 3
            },
            "presentation": {
                "value": 3
            },
            "contribution": {
                "value": 2
            },
            "strengths": {
                "value": "The problem definition is clear with regard to the PENO being trained under a forecasting objective satisfying the physics constraints.\nInstead of having a single network satisfy both data-driven and physics-based constraints, PENO has two branches, one FNO and the other physics based PDE branch. The final prediction / forecast is a weighted combination of the outputs of both branches.  Instead of using continuous derivatives, the authors use temporal and spatial discretisation to estimate the gradient terms in the governing equations. This is beneficial as it reduces the load on the neural network to strongly learn the continuous derivatives in the presence of only sparse data.\nThe authors clearly describe their methodology, datasets used, training and testing protocol.\nThey provide results validating their method across different benchmarks and other data-driven models. \nThe objective function is a simple forecasting MSE based loss function.This makes the learning easy and could prevent the competing objectives problem otherwise encountered in PINNs. Moreover, PENO allows multiple data sources to be combined as well such as DNS and LES through a weighted combination."
            },
            "weaknesses": {
                "value": "Although the authors claim novelty in the physics enhanced operator, the authors have seemed to ignore previous works on physics informed/enhanced operator learning in this domain. Physics informed neural operator: https://arxiv.org/pdf/2111.03794v3, Physics informed DeepONet https://ar5iv.labs.arxiv.org/html/2207.05748 and its derivatives. Instead of comparing their model with other operator learning frameworks, they infact compare with some of the super-resolution models which in some way seems out of context. It would have been better if the authors could have provided comparison with the other previously proposed Physics based operator learning frameworks which came out much earlier than this work. While the contours look decent in the results, comparison of spatial and temporal spectrum would be worthwhile in showing if the model is capable of overcoming spectral bias that otherwise plagues neural networks in general. It is not clear if PENO can operate in a purely physics based training regime without the data-driven component as in PINO."
            },
            "questions": {
                "value": "1. Could you elaborate on the key differences between PENO and Physics informed neural Operator?\n2. Is there any reason to not compare your model with other operator learning based frameworks and not include them in the survey or in this study?\n3. Could you explain why temporal or spatial spectrum of the flow-fields have not been included in the evaluation? Any justification for why dissipation different has been considered?\n4. Can PENO be used in a fully data-free regime as in the PINO paper? Where given only the initial and boundary conditions, can the model be trained to simulate turbulent flow?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": 6
            },
            "confidence": {
                "value": 5
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        {
            "summary": {
                "value": "This paper proposes to embed PDE-based constraints into FNOs for simulating fluids. Specifically, the paper targets turbulent transport, and long-term unrolling, i.e., many repeated invocations of the trained prediction network. FNOs have inherent known limitations in terms of the frequency spectrum that they can process. Here, the FNO blocks are augmented with \u201cPDE branches\u201d that predict the evolution the flow with a regular numerical method. \n\nTo prevent loosing smaller frequencies, the authors propose to predict two versions in parallel (low and high resolution), that are merged to produce an output that should better reflect the frequency distribution of the targets.\n\nThe method is evaluated on an isotropic turbulence case, and a taylor-green vortex. The authors also share their implementation at submission time, which is neat to see. Unfortunately, only very short rollouts of 10 to 20 steps are shown. For \u201creal\u201d applications in turbulence this seems very short.\n\nTwo recommendations regarding the presentation: \n\nFig. 4, does not really show the important part, the high frequencies. As often done in fluids papers, I can recommend rescaling by wavenumber (optionally with an exponent >1), or to provide some metrics on how much the frequency content improves.\n\nWhy give separate values for each channel in Table 1? You could simply mention that SRGAN has difficulties with the z-component, but it\u2019s usually taken for granted that a \u201cproper\u201d architecture can handle multiple output channels."
            },
            "soundness": {
                "value": 2
            },
            "presentation": {
                "value": 2
            },
            "contribution": {
                "value": 2
            },
            "strengths": {
                "value": "The paper has several interesting aspects:\n* It targets important and challenging scenarios\n* Improvements over regular FNOs are demonstrated\n* The submission comes with three-dimensional test cases\n* A nice range of \u201cpure prediction\u201d baselines are included"
            },
            "weaknesses": {
                "value": "One the negative side\n* Effectively only 2 test scenarios are evaluated\n* The metrics for evaluating the quality of the turbulent outputs are \u201cunusual\u201d, why not employ common metrics, starting with MSE, over energy spectra, TKE etc.?\n* Section 3.2 is fairly unclear, Q-tilde and Q-hat are not used in any equations\n* The length of the rollouts is extremely short. Long-term stability is not evaluated.\n\nMaybe the largest problem I see with this submission is the omission of previous solver-in-the-loop approaches. These have a very similar goal to improve a coarse simulated baseline (here the evolution of eq. 1) with a learned model. The paper neither cites or discusses any of the related works, Um\u20192020, Kochkov\u20192021 etc. As far as I understand, the method in 3.1 corresponds exactly to a learned correction setup with an FNO as architecture. I still see merit in the subtler differences, and 3.2 seems to be non-standard (albeit a bit unclear), but these parallels should be made clear from the beginning. Similarly, the discussion of new aspects should put the work in context to those previous papers."
            },
            "questions": {
                "value": "Please comment on similarities with solver-in-the-loop approaches, and clarify 3.2, as outlined above."
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": 5
            },
            "confidence": {
                "value": 4
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        {
            "summary": {
                "value": "This paper proposes a physics enhanced neural operator (PENO) for regressing Direct Numerical Simulation (DNS) states to accurately  model turbulent flows. The proposed pipeline consists of a next-step neural predictor that takes an input state of the solver, consisting of a combination of DNS and Large Eddy Simulation (LES) variables (velocity/vorticity/pressure) at a given time step $t$. Then the PENO method predicts the next time step; this can be done recursively to predict a series of steps, effectively advancing the simulation without requiring a numerical solver. The proposed approach is based on Fourier Neural Operators (FNOs), which approximate the Navier-Stokes Partial Differential Equation (PDE) solution through a transformation of the input variables to Fourier space. However, trained FNOs with mean squared error losses have two shortcomings: limited generalization and reduced accuracy due ignorance of the underlying PDE, and impaired ability to capture high-frequency information of the learned dataset. The authors tackle these issues by estimating temporal gradients through direct assessment of the underlying PDE and through augmenting the regression with an additional network branch that performs super-resolution to capture high-frequency details.  The method is trained and tested in two datasets: the Forced Isotropic Turbulent flow (FIT) and the Taylor-Green vortex (TGV) flow, and the authors present some quantitative and qualitative analysis comparing the proposed approach against previous methods."
            },
            "soundness": {
                "value": 2
            },
            "presentation": {
                "value": 2
            },
            "contribution": {
                "value": 1
            },
            "strengths": {
                "value": "The authors correctly identify issues with the known  spectra bias in networks trained with MSE losses. These approaches tend to fail capturing crucial high-frequency information of the learned dataset. The proposed architecture is compared against previous baselines, and it shows interesting qualitative evaluations for next time step DNS prediction. Lastly, using the PDE information during training is an effective way to improve accuracy and generalization."
            },
            "weaknesses": {
                "value": "My biggest concern with papers that propose to replace solvers is their usual lack of fair comparison to a well implemented physics solver running on similar hardware (GPU) (for a thorough analysis check \"Weak baselines and reporting biases lead to overoptimism in\nmachine learning for fluid-related partial differential equations\"). A solver is a computational graph that can accurately predict the next state without the usual issues of data-driven approaches (lack of generalization, reduced accuracy). Without a clear intuition why a neural approach is able to make such a computational graph more efficient (e.g., reducing the dimensionality of the input through model reduction), it\u2019s hard to justify why such a method is useful in the first place. This is the case for this paper, as the authors didn\u2019t provide a fair comparison between their method and a DNS solver.  The authors could include a comparison of computational efficiency and accuracy between their method and a state-of-the-art DNS solver implemented on similar hardware for better assessing the efficiency of such proposed approach. Additionally, the authors could also more explicitly discuss the potential advantages of their neural approach over traditional solvers.\n\nThe paper also could have done a better job of evaluating errors in time, which are one of the common issues of regressing simulations with neural approaches, as this issue is not present in traditional solvers. Neural approaches that integrate in time tend to highly diverge relative to a ground truth solver, check \u201cStability analysis of chaotic systems from data\u201d and \u201cHow Temporal Unrolling Supports Neural Physics Simulators\u201d for further references. Furthermore, the authors could include a more detailed analysis of how prediction errors accumulate over time, showing more precise error metrics (apart from the ones presented in Figure 5) for different prediction horizons. You could also suggest they discuss how their method addresses (or doesn't address) the issue of divergence over time compared to traditional solvers.\n\nMoreover, the chosen network architecture/approach for the regression of the next time step is outdated, since currently many other authors are now relying on the power of diffusion models to properly capture the complex behavior of fluid simulations. The authors even add a bit of noise to \u201cimprove generalization\u201d, but it\u2019s stated in the paper that a careful evaluation of such an approach is needed. I would suggest that just implementing a straightforward conditioned diffusion model would be a better solution. Otherwise, the authors could also compare their method against a state-of-the-art diffusion model approach, explaining why they chose their current architecture over more recent alternatives. The two-stage network solution also seems a bit cumbersome, and I suspect one could do the regression in a single-step. Perhaps the authors could do a better job at justifying why this approach was chosen over a single-step regression.\n\nThe manuscript, in its current version, also contains several exposition issues. Several typos (e.g, L025: \u201c. we further\u201d, L030: \u201cresults confirms\u201d, L082: \u201ctraining data are scarce\u201d, L144: \u201cdenotes\u201d, L174: \u201cfiltration\u201d -> filtering, L223 (Figure 3): \u201cNaiver Stoke\u201d, L241: \u201cappendix\u201d, L275: \u201cdo not require\u201d, L278: \u201c, We create output\u201d, L341: \u201c5, 024\u201d, L478: \u201c. the simulated\u201d, L494: \u201cfaces increased\u201d are present. These errors reduce readability and can be confusing to the reader. \n\nLastly, the authors miss out several important references that are relevant to this work: The following papers are of direct relevance to the current submission: \u201cBenchmarking Autoregressive Conditional Diffusion Models for Turbulent Flow Simulation\u201d, \u201cUncertainty-aware Surrogate Models for Airfoil Flow Simulations with Denoising Diffusion Probabilistic Models\u201d,  \u201cUnsteady Cylinder Wakes from Arbitrary Bodies with Differentiable Physics-Assisted Neural Network\u201d and \u201cHow Temporal Unrolling Supports Neural Physics Simulators\u201d.\n\nThe aforementioned weaknesses and questions present in the next section justify my score for this paper."
            },
            "questions": {
                "value": "- At L141, it is included a transformation from the spatial domain to the Fourier domain for $\\mathbf{Q}(t)$ at time $t$. Is the integration domain for the Fourier transformation to be a for a fixed time step, or is it for multiple time steps? The Fourier transform is written through integrating on $dt$, but I believe that the authors meant integration on the Fourier domain. Consider writing these variables differently for better exposition.   \n\n- At L209 the authors parametrize the non-linear function that represents the temporal derivative of $\\mathbf{Q}$ through a parameter $\\theta$. Why is this relevant? I could not find where this parameter was referenced in other places of the manuscript. \n\n- Equation 1 denotes the evolution of an arbitrary variable $\\mathbf{Q}$ when $\\mathbf{Q} = \\vec{v}$, where $\\vec{v}$ is the fluid velocity. Why not write it only for velocity? If ones considers the Navier Stokes equation with regards to the vorticity, different formulations have to be considered (e.g., vorticity-streamfunction vs vorticity-velocity formulations), alongside with potential complications on the definition of boundary conditions.\n\n- Why the authors didn\u2019t include measuring the MSE in Tables 1 and 2? There seems to have space to do so, and it would benefit the quantitative analysis of the paper."
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": 3
            },
            "confidence": {
                "value": 5
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        }
    ]
}