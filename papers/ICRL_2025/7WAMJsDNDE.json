{
    "id": "7WAMJsDNDE",
    "title": "Janus: Dual-server Multi-Round Secure Aggregation with Verifiability for Federated Learning",
    "abstract": "Secure Aggregation (SA) in federated learning is essential for preserving user privacy by ensuring that model updates are masked or encrypted and remain inaccessible to servers. Although the advanced protocol Flamingo (S\\&P'23) has made significant strides with its multi-round aggregation and optimized communication, it still faces several critical challenges: (i) $\\textit{Dynamic User Participation}$, where Flamingo struggles with scalability due to the complex setups required when users join or leave the training process; (ii) $\\textit{Model Inconsistency Attacks}$ (MIA), where a malicious server could infer sensitive data, which poses severe privacy risks; and (iii) $\\textit{Verifiability}$, as most schemes lack an efficient mechanism for clients to verify the correctness of server-side aggregation, potentially allowing inaccuracies or malicious actions. We introduce Janus, a generic privacy-enhanced multi-round SA scheme through a dual-server architecture. A new user can participate in training by simply obtaining the servers' public keys for aggregation, eliminating the need for complex communication graphs. Our dual-server model separates aggregation tasks, which ensures that neither server has access to the final aggregated results, thus effectively preventing MIA. Additionally, we propose a new cryptographic primitive, $\\textit{Separable Homomorphic Commitment}$, integrated with our dual-server approach to ensure the verifiability of aggregation results. Extensive experiments across various models and datasets show that Janus significantly boosts security while enhancing efficiency. It reduces per-client communication and computation overhead from  logarithmic to constant scale compared to state-of-the-art methods, with almost no compromise in model accuracy.",
    "keywords": [
        "federated learning",
        "secure aggregation",
        "privacy enhancement"
    ],
    "primary_area": "alignment, fairness, safety, privacy, and societal considerations",
    "TLDR": "",
    "creation_date": "2024-09-27",
    "original_date": "2024-10-04",
    "modification_date": "2024-10-13",
    "forum_link": "https://openreview.net/forum?id=7WAMJsDNDE",
    "pdf_link": "https://openreview.net/pdf?id=7WAMJsDNDE",
    "comments": [
        {
            "comment": {
                "value": "Thank you for your valuable feedback, and we address your concerns as follows.\n\n$\\textbf{1. Security (Q1, Q2, Q5, Q13-15) }$. \n\nQ1: Unlike existing single-server schemes (e.g., VeriFL), which require the server to aggregate results and thus fail to resist MIA, our Janus scheme enables dynamic user participation while resisting MIA and ensuring verifiability. Additionally, Janus is more efficient, relying on simple one-time pads (OTP) and SHC, rather than complex cryptographic tools like homomorphic encryption or secret sharing. We will highlight these advantages in the revised version.\n\nQ2: Janus resists collusion of up to $n-2$ clients. If $n-1$ clients collude, they can trivially deduce the remaining client\u2019s information. However, with $n-2$colluding clients, they can only obtain the additive result of two uncolluding clients. This result is an aggregation of two encrypted or obfuscated values, making it impossible to recover each uncolluding user's specific gradient information. We will provide a detailed analysis of this property for clarity.\n\nQ5: The masking technique used in $\\textit{Janus}$ is OTP. As long as each secret key ($sk$) is used only once per round, the masked inputs reveal no information about the original values, even a single bit. Therefore, differential analysis is ineffective in this context.\n\nQ13\u201315: Our theoretical analysis supports the claimed properties of resisting MIA, supporting multiple rounds, and tolerating a maximum number of colluding clients. This is similar to the approaches used in Flamingo (SP\u201923) and Securing Secure Aggregation (AAAI\u201923), where theoretical analysis is also employed.\n\n$\\textbf{2. SHC (Q6-7, Q16)}$.\n\nIn Section 3.1, we clarify that SHC requires completeness, binding, hiding, separability, and homomorphism. The hash-based commitment you mentioned does not meet these requirements, so length extension attacks do not apply. Our design does not require additional properties like trapdoors or equivalence (as in VeriFL), which simplifies the design and improves performance without compromising security. The Pedersen commitment, a widely used SHC, serves as a strong example of our approach\u2019s security, as demonstrated in blockchain systems like Monero and ZCash.\n\n$\\textbf{3. Dropout (Q3, Q4)}$.\n\nQ3: In traditional schemes, all users need to negotiate a shared key as a mask before communication. If a user fails to upload masked parameters in later stages, the mask cannot be canceled across the system. However, our scheme avoids establishing complex communication graphs and only requires a single interaction with the server, thus eliminating the dropout issues present in traditional schemes. The only potential problem arises if a user fails to update both servers, but this is trivially avoided by ensuring synchronization between the two servers. This ensures that both servers either receive the message or don\u2019t receive it at all, thus maintaining atomicity. However, traditional schemes cannot resolve dropout issues via this simply synchronization method. \n\nQ4: We will include experiments with varying dropout rates in the revised version. These do not involve complex techniques and will help validate our claims.\n\n$\\textbf{4. Experiments (Q8-Q12)}$.\n\nIn lines 438-443, we have explained the specific parameters used in the experimental setup to ensure reproducibility. Our scheme is not limited to specific models or datasets, and the paper includes theoretical analysis and experimental comparisons of each scheme\u2019s performance across different models and datasets (lines 362-564). The theoretical analysis shows that our scheme significantly improves computational efficiency. To further highlight the advantages of $\\textit{Janus}$, we will add experiments validating performance in terms of computational and communication costs. We have already conducted multi-round aggregation experiments, which are similar to those with varying numbers of users. Additionally, we will include new datasets (e.g., CIFAR-100, Fashion-MNIST) and advanced comparison schemes (e.g., Elsa (SP\u201923), VeriFL (2020)) in the updated version.\n\nWe greatly appreciate your feedback and will ensure these clarifications are included in the revised manuscript. If you have any further concerns, please let us know."
            }
        },
        {
            "comment": {
                "value": "Thank you for your insightful feedback. Below, we address your concerns.\n1. $ \\textbf{Versatility}$. This property highlights that our scheme is a generic construction, not limited to specific cryptographic tools like Separable Homomorphic Commitments (SHC) or one-time pads (OTP). In contrast, other schemes rely on specific tools, lacking such flexibility. We will add a description of this versatility in the revised paper.\n\n2. $\\textbf{Comparison with 2PC and Other Schemes}$. While 2PC is simple and direct, it often relies on resource-intensive homomorphic encryption and zero-knowledge proofs. In contrast, our scheme uses lightweight cryptographic primitives (SHC and OTP). ELSA assumes at least one honest server, whereas our scheme only requires two uncolluding servers, allowing for malicious server aggregation. We will correct the threat model in the revised paper to reflect that servers can be malicious. Our scheme can detect malicious aggregation through its built-in verifiability, which provides an advantage over these approaches.\n\n3. $\\textbf{Advantages}$. In addition to comparing accuracy and loss, we evaluate the single-round computational cost of each scheme across different models and datasets (lines 483\u2013524). Our analysis shows that while secure aggregation inevitably increases computational cost compared to plaintext aggregation, our scheme achieves substantial efficiency improvements over other advanced secure aggregation schemes of the same type.\n\n4. $\\textbf{User Join and Sybil Attacks Resistance}$. In lines 23\u201325 and lines 301-308, we explain how new users can join the training process. A new user simply needs to acquire the system\u2019s public parameters, generate a public-private key pair, and obtain the server\u2019s public key. The key is certified by authorities to authenticate the user\u2019s identity. This approach avoids the need for rebuilding the communication graph when users leave, which distinguishes our scheme from others. An adversary attempting a Sybil attack could obtain encrypted data, but would not be able to perform a MIA, as controlling at least $n-1$ users would be required to access private input. Additionally, our scheme\u2019s reliance on Public Key Infrastructure (PKI) and the use of certificates makes Sybil attacks even more difficult, as forgeries would require creating valid certificates from authorities. Thus, our scheme effectively mitigates Sybil attack risks.\n\nWe greatly appreciate your feedback and will incorporate these clarifications in the revised paper. Thank you again, and we look forward to your response."
            }
        },
        {
            "comment": {
                "value": "We sincerely thank you for your time and valuable feedback. Below, we address the technical and theoretical concerns you raised.\n1. $\\textbf{Security Assumption}$. The specific assumptions in our paper are as follows: The two servers will not collude but may perform incorrect aggregation. The scheme also allows for up to $n-2$ clients to collude. Specifically, even if the server aggregates incorrect results, our scheme provides verifiability, which enables us to detect such behavior and mitigate the associated risks.\nIf the server colludes with up to $n-2$ clients, it can only obtain the additive result of the remaining two uncolluding clients. This result is an aggregation of two encrypted or obfuscated values, making it impossible to recover each uncolluding user's specific gradient information. This ensures that the colluding entities cannot initiate a Model Inconsistency Attacks (MIA) or access the private information of the remaining two non-colluding clients. When $n-2$ clients collude, this assumption is even weaker, as the absence of server involvement further limits the accessible information, making it even harder to extract useful data.\nIf only a single server is corrupted, this does not compromise individual user privacy. For instance, with server $S_0$, as long as the underlying encryption algorithm is secure, the server cannot access the user-submitted private data without the user's private key. Similarly, for server $S_1$, the security of the underlying Separable Homomorphic Commitment (SHC) ensures that its hiding properties prevent $S_1$ from obtaining any private information.\nIn conclusion, the assumptions of our scheme are reasonable and well-supported. We will incorporate these clarifications in the revised version to better highlight the theoretical advantages of our approach.\n\n2. $\\textbf{Adding Experiments}$. Our scheme is not limited to specific models or datasets. In the paper, we have conducted theoretical analysis and experimental comparisons of each scheme's performance under various models and datasets (lines 362-564). Theoretical analysis indicates that our scheme significantly improves computational efficiency. However, to better showcase the advantages of our scheme, we will include additional experiments in future versions to verify performance from the perspectives of computational and communication costs. Furthermore, to address your concerns, we will add more datasets, such as CIFAR-100 and Fashion-MNIST, and include new SOTA comparison schemes like Elsa (SP\u201923) and VeriFL (IEEE TIFS\u201920) in the updated version.\n\n3. $ \\textbf{Comparison with Other Schemes}$. We have already included several representative advanced schemes of the same type in the paper, but we will still add Elsa (SP\u201923) and VeriFL (IEEE TIFS\u201920) as comparison schemes. Compared to Elsa (SP\u201923), our scheme makes weaker assumptions, resulting in higher security while supporting multi-round aggregation with a significant performance improvement. Compared to VeriFL (IEEE TIFS\u201920), our scheme does not require constructing complex communication graphs or performing time-consuming secret sharing operations, which leads to substantial performance gains.\n\n4. $\\textbf{Additional Experiments}$. Thank you for your suggestion. In the paper, we have already provided single-round timing statistics for both the client and server across different models and datasets. The experiment you mentioned is feasible to add, and we will include these updated metrics in the revised version.\nWe greatly appreciate your feedback and will ensure these clarifications are incorporated in the revised paper. Thank you once again, and we look forward to your response."
            }
        },
        {
            "comment": {
                "value": "We sincerely thank you for your time and valuable feedback. Below, we address the technical and theoretical concerns you raised.\n1) $\\textbf{Uncolluding Assumption}$. The assumption of two uncolluding servers is common in federated learning research, as demonstrated by works like Elsa (SP\u201923), VeriFL (IEEE TIFS\u201920), and Flamingo (SP\u201923), all of which make similar assumptions. In our scheme, while we assume the servers are uncolluding, they are allowed to behave maliciously during aggregation. This design choice is supported by our scheme\u2019s verifiability mechanism, which ensures that any malicious aggregation results can be detected. Furthermore, our scheme allows for up to $n-2$ colluding clients, which is a reasonable and sufficient level of security, even in environments where trust is limited.\n2) $\\textbf{Server Aggregation Verification}$. As outlined in our previous response, our scheme includes a verification mechanism to ensure the correctness of the server\u2019s aggregation results. If an incorrect aggregation occurs, our system can detect the anomaly through this verification. To further incentivize accurate aggregation by the servers, future research could introduce mechanisms such as reputation scores, rewarding servers that perform correct aggregation. Additionally, we will revise the paper to correct the assumption of semi-honest servers, clarifying that servers can act maliciously, which is fully accounted for in our design.\n3) $\\textbf{SHC Instantiation and Explanation}$. To aid reader understanding, we provide an instantiation of Separable Homomorphic Commitments (SHC) in lines 245\u2013289. We also offer a more detailed description of the SHC instantiation in lines 803\u2013863. To improve the clarity of our explanation, we will revise the paper to include a more intuitive explanation of SHC and the other cryptographic concepts used in our scheme.\n\nWe greatly appreciate your feedback and will incorporate these clarifications in the revised version of the paper. Thank you again, and we look forward to your response."
            }
        },
        {
            "summary": {
                "value": "This paper consider several key challenges in secure aggregation: dynamic user paticipation, resistance to model inconsistency attacks (MIA), and verifiability of aggregation of malcious servers. This paper proposes a dual-server architecture where one server aggregates the masked gradients and the other aggregates the masks, ensuring that neither server has access to the final aggregation result, thus protecting against MIA. It also incorporates a novel cryptographic primitive, Separable Homomorphic Commitment (SHC), which enables clients to verify the correctness of the server\u2019s aggregation without sacrificing efficiency."
            },
            "soundness": {
                "value": 3
            },
            "presentation": {
                "value": 2
            },
            "contribution": {
                "value": 3
            },
            "strengths": {
                "value": "-  While a two-server model is not new, I like the idea that the proposed method introduces the dual server model to protect against MIA by preventing either server from accessing the final aggregation result.\n- This paper introduces SHC, which allows users to verify aggregation correctness without incurring heavy computational costs.\n- It reduces the communication and computation overhead from logarithmic to constant scale, which is a major improvement over advanced schemes like Flamingo and BBSA. This makes it more practical for large-scale federated learning frameworks."
            },
            "weaknesses": {
                "value": "- The proposed method relies heavily on the assumption that the two servers do not collude. While this assumption is reasonable in certain applications, it is also a potential limitation. In practice, ensuring non-collusion between two entities may not always be feasible, especially in untrusted environments. \n- In addition, while the paper claims that the proposed scheme mitigates the risks associated with a single-server setup, the system still relies on the assumption that both servers should be successful in aggregation. If either server fails, the entire system could be at risk. \n- As the SHC protocol plays key role to verify the correctness in the dual-server system, it would be helpful if the SHC protocol is described with clearer notation and more intuitive explanations. For instance, separation of commitments could be explained more thoroughly for readers unfamiliar with the cryptographic concepts."
            },
            "questions": {
                "value": "please see the comments in weakness."
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": 6
            },
            "confidence": {
                "value": 3
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        {
            "summary": {
                "value": "The paper presents Janus, a privacy-enhanced multi-round secure aggregation (SA) scheme for federated learning. It addresses challenges faced by existing protocols like Flamingo, including dynamic user participation, model inconsistency attacks (MIA), and lack of verifiability. Janus uses a dual-server architecture and a new cryptographic primitive, Separable Homomorphic Commitment (SHC). New users can easily join training, and the dual-server setup prevents MIA. SHC ensures aggregation result verifiability. Experiments show improved security and efficiency with reduced per-client overhead and maintained model accuracy."
            },
            "soundness": {
                "value": 3
            },
            "presentation": {
                "value": 3
            },
            "contribution": {
                "value": 3
            },
            "strengths": {
                "value": "(1) The dual-server architecture and the concept of separable homomorphic commitmen are novel contributions. The combination of these elements to address multiple challenges in secure aggregation is interesting.\n\n(2) The scheme is well-designed, with each component serving a specific purpose in enhancing security and efficiency. The integration of SHC with the dual-server model is seamless and effective."
            },
            "weaknesses": {
                "value": "(1) While the non-collusion assumption of servers is stated, a more in-depth analysis of potential threats and how they are mitigated in different scenarios could be added. For example, what if a malicious actor compromises one of the servers or if there are side-channel attacks?\n\n(2) The experiments could be more extensive. For instance, testing on a wider range of datasets and models, including those with more complex architectures and larger data volumes, would provide a more comprehensive evaluation of the scheme's performance. Also, the impact of different network conditions on the performance of Janus could be explored.\n\n(3) Although the author has compared with some existing methods, there are few comparison methods. The author may need to add some comparison methods to further verify the effectiveness of Janus.\n\n(4) The author may also need to add some additional experiments to verify the effectiveness of Janus, such as aggregation completion time, computation costs, etc."
            },
            "questions": {
                "value": "The author needs to explain in detail the questions I mentioned above, and I will determine the final score based on your answers."
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": 6
            },
            "confidence": {
                "value": 4
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        {
            "summary": {
                "value": "The paper introduces Janus, a system for multi-round secure aggregation for federated learning. By having a very low round setup independent of the number of clients, Janus can easily be used for multiple rounds. Janus utilizes a dual-server setup where one server handles masked updates and the other manages aggregation of masks, ensuring that neither server has access to the final aggregated results. A novel cryptographic primitive, Separable Homomorphic Commitment, enables client-side verification of the correctness of the aggregation result. The authors evaluate Janus end-to-end, highlighting its constant per-client communication and computational overhead while preserving model accuracy."
            },
            "soundness": {
                "value": 2
            },
            "presentation": {
                "value": 2
            },
            "contribution": {
                "value": 2
            },
            "strengths": {
                "value": "- Addresses scalability challenges of privacy-preserving federated learning\n- Comprehensive evaluation with end-to-end model training"
            },
            "weaknesses": {
                "value": "- Incomplete comparison with related work in the multi-server FL setting such as 2-party MPC or [ELSA: Secure Aggregation for Federated Learning with Malicious Actors, S&P\u201923]. These approaches also provide low overhead for clients, independent of the number of clients. Adding a more detailed comparison could help contextualize Janus' unique contributions and highlight differences in scalability and overhead reduction strategies.\n- The threat model assumes non-collusion among entities, which may not align with practical scenarios, particularly regarding client behaviors. In real-world applications, service providers could potentially collude with a bounded subset of clients, as assumed in related works\u2019 threat models. Janus\u2019 reliance on a non-collusion model raises concerns about its susceptibility to model inconsistency attacks if a provider colludes with even a single client or introduces a Sybil client, potentially gaining access to the aggregated model and undermining security. Additionally, the threat model assumes the servers are semi-honest, which makes achieving verifiability property trivial.\n- The security proof contains inaccuracies that hinder their clarity. For instance, Theorem 1 references two distinct ideal functionalities (Figures 6 & 7), though Figure 7 appears underdefined. The distinction in scenarios based on \u201cwhether the servers are corrupted by A\u201d might incorrectly imply that both servers could be corrupted simultaneously, which conflicts with the intended security assumptions."
            },
            "questions": {
                "value": "1. In Table 1: What is the versatility property?\n2. How does your approach compare with a straightforward 2PC baseline, and other multi-server FL systems such as [ELSA: Secure Aggregation for Federated Learning with Malicious Actors, S&P\u201923]?\n3. Given that you focus much of the evaluation on the accuracy and loss of the approaches, would we expect a difference with related secure aggregation schemes?\n4. How can new users join the training process? What prevents the service provider from setting up sybil clients to get access to the model?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": 3
            },
            "confidence": {
                "value": 5
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        {
            "summary": {
                "value": "Janus introduces a Secure Aggregation (SA) scheme for Federated Learning (FL) that overcomes some challenges in existing protocols by implementing a dual-server architecture and a  cryptographic primitive called Separable Homomorphic Commitment (SHC)."
            },
            "soundness": {
                "value": 1
            },
            "presentation": {
                "value": 2
            },
            "contribution": {
                "value": 1
            },
            "strengths": {
                "value": "The paper is clear and well-organized, with complex concepts explained effectively and supported by useful visual aids."
            },
            "weaknesses": {
                "value": "While the paper introduces an approach with Janus, several weaknesses limit its contribution and practical applicability. First, it lacks a comparison with single-server state-of-the-art methods like VeriFL, raising questions about its feasibility and efficiency compared to existing solutions. The assumption that clients do not collude is unrealistic, especially if clients are interested in each other's model updates; the scheme does not specify how many colluding users it can tolerate, leaving potential vulnerabilities unaddressed. Fault tolerance is insufficient, as user dropout can disrupt the entire aggregation process, and the paper does not explain how it handles partial user failures or higher dropout rates. The scheme may be vulnerable to differential attacks if an attacker obtains masked data from multiple rounds and exploits similarities in user inputs to infer private information. The commitment mechanism lacks detailed specifications, and if a simple hash-based commitment is used, it may be susceptible to length extension attacks. The Separable Homomorphic Commitment (SHC) appears to be a variant of existing commitment schemes without substantial innovation and lacks essential properties like trapdoor mechanisms and equivalence, potentially weakening security; more theoretical support and security proofs are needed. Additionally, implementation details for comparative schemes are insufficient, experiments lack statistical significance analysis and detailed breakdowns of computational and communication overhead, and there is no evaluation of scalability with different user numbers or model sizes. Claims of resistance to Model Inconsistency Attacks and multi-round security are not experimentally validated, which undermines the credibility of the proposed security enhancements."
            },
            "questions": {
                "value": "1. The paper does not compare Janus's overhead and feasibility with existing single-server SOTA methods that achieve similar privacy and verifiability. Notably, schemes like VeriFL have demonstrated efficient verifiable federated learning in a single-server setting. In addition, the aggregation results of a single server can actually be kept secret (already exists).\n\n2. The paper assumes that clients do not collude. However, if clients are interested in each other's model updates, this assumption may not hold. Colluding clients could potentially infer private information about other users.\n\n3. The scheme's fault tolerance is limited; user dropout can adversely affect the entire aggregation process. The paper does not adequately explain how the system handles partial user failures or higher dropout rates.\n\n4. Develop and describe mechanisms to handle user dropout more effectively. This could include techniques like dropout resilience protocols or asynchronous aggregation methods. Experiment with varying dropout rates, including those higher than the idealistic 10%, to demonstrate the scheme's robustness in realistic settings.\n\n5. If an attacker obtains masked inputs from two rounds where the user's input remains similar (i.e., \\( x_{i,t} \\approx x_{i,t+1} \\)), they could perform differential analysis to infer changes in the original inputs.\n\n6. The paper does not specify the specific requirements or properties of the commitment algorithm used in the SHC. If a simple hash-based commitment is used (e.g., \\( c_{i,t} = H(x_{i,t} || r_{i,t}) \\)), it may be vulnerable to length extension attacks or other cryptographic weaknesses.\n\n7. SHC is described as a variant of existing commitment schemes but lacks substantive innovation. It does not support essential properties like trapdoor mechanisms or equivalence, which are present in schemes like the one used in VeriFL. The security proofs provided are insufficient to establish its robustness.\n\n8. The implementation details, particularly the parameter settings for Janus and the comparative schemes (BBSA and Flamingo), are not thoroughly documented. This omission hampers reproducibility and makes it difficult to assess the validity of the experimental results.\n\n9. The experiments lack information on the number of repetitions and do not include statistical analyses to determine the significance of the results.\n\n10. The paper only reports the total computation time without decomposing the overhead into its constituent components (e.g., cryptographic operations, communication latency).\n\n11. There is no empirical data or graphical analysis of the communication overhead; the paper relies solely on theoretical analysis.\n\n12. The experiments are conducted with a relatively small number of users (100), which is insufficient to demonstrate scalability. The impact of varying the number of users and the model size on performance is not evaluated.\n\n13. While the paper claims that Janus resists MIA, it does not provide experimental tests or simulations to substantiate this claim.\n\n14. The security of Janus over multiple rounds is not experimentally verified, leaving potential vulnerabilities unaddressed.\n\n15. The scheme does not specify the maximum number of colluding users it can tolerate without compromising security.\n\n16. By omitting features like trapdoor mechanisms and equivalence properties, SHC may be less secure than existing commitment schemes. For example, in VeriFL, the commitment scheme allows for equivalence operations, which enhance functionality and security."
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": 3
            },
            "confidence": {
                "value": 5
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        }
    ]
}